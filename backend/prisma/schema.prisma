// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String     @unique
  password       String
  isAdmin        Boolean    @default(false) // Adicione esta linha!
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  devices        Device[] // Relacionamento com os dispositivos do usuário
  predictions    ConsumptionPrediction[] // Relacionamento com as previsões de consumo
  @@map("users")
}

// Novo modelo para representar os dispositivos Tasmota (ex: Sonoff POW Elite R3)
model Device {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  tasmotaTopic         String          @unique
  macAddress           String?
  model                String?
  userId               String          @db.ObjectId
  user                 User            @relation(fields: [userId], references: [id])
  powerState           Boolean         @default(false)
  lastSeen             DateTime? // <<-- Adicione esta linha
  ipAddress            String? // <<-- Adicione esta linha
  lastSavedTotalEnergy Float? // <<-- NOVO: Último valor de energia total salvo no banco
  broker               String? // NOVO: Identificador do broker MQTT do dispositivo
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  readings             EnergyReading[]

  @@map("devices")
}

// Novo modelo para armazenar as leituras de energia do Tasmota
model EnergyReading {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  deviceId        String   @db.ObjectId // ID do dispositivo Tasmota que gerou a leitura
  device          Device   @relation(fields: [deviceId], references: [id])
  timestamp       DateTime // Momento da leitura
  power           Float // Potência instantânea em Watts (W)
  voltage         Float // Voltagem em Volts (V)
  current         Float // Corrente em Amperes (A)
  totalEnergy     Float? // Energia total acumulada em kWh (AGORA OPCIONAL - só salvo no último dia do mês)
  EnergyToday     Float? // Energia consumida hoje (kWh)
  EnergyYesterday Float? // Energia consumida ontem (kWh)
  ApparentPower   Float? // Potência aparente (VA)
  ReactivePower   Float? // Potência reativa (var)
  PowerFactor     Float? // Fator de potência
  brokerLabel     String? // Identificador do broker (broker1 ou broker2)
  activeHours     Int? // Horas que o dispositivo ficou ligado no dia
  activeMinutes   Int? // Minutos que o dispositivo ficou ligado no dia
  activeSeconds   Int? // Segundos que o dispositivo ficou ligado no dia
  activeDuration  Float? // Duração total em horas que o dispositivo ficou ligado no dia

  @@map("energyReadings")
}

// Modelo para armazenar previsões de consumo de energia geradas pela IA
model ConsumptionPrediction {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @db.ObjectId // ID do usuário dono da previsão
  user                 User     @relation(fields: [userId], references: [id])
  predictionDate       DateTime @default(now()) // Data em que a previsão foi gerada
  targetMonth          DateTime // Mês para o qual a previsão foi feita
  estimatedConsumption Float    // Consumo estimado em kWh
  estimatedCost        Float    // Custo estimado em R$
  previousMonthCost    Float?   // Custo do mês anterior (para cálculo de economia)
  monthlySavings       Float?   // Economia mensal estimada em R$
  confidence           String   // Nível de confiança da previsão (baixa, média, alta)
  calculationMethod    String?  @default("consumo_historico") // Método de cálculo usado (tempo_de_uso ou consumo_historico)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("consumptionPredictions")
}
